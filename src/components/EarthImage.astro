---
import Countdown from "./Countdown.astro";


let stats = [
    {
      "count": "15000",
      "symbol": "+",
      "text": "Visitors"
    },
    {
      "count": "5000",
      "symbol": "+",
      "text": "Startups"
    },
    {
      "count": "400",
      "symbol": "+",
      "text": "HNIs"
    },
    {
      "count": "300",
      "symbol": "+",
      "text": "Mentors"
    },
    {
      "count": "200",
      "symbol": "+",
      "text": "Corporates"
    },
    
    {
      "count": "150",
      "symbol": "+",
      "text": "Investors"
    },
   
    {
      "count": "150",
      "symbol": "+",
      "text": "Speakers"
    },
    {
      "count": "100",
      "symbol": "+",
      "text": "Exhibitors"
    },
    
    
  ];

---
<section id="home">
  <div id="earth-container" class="bg-black"></div>
  
  <!-- <video src="/bg-huddle-2.mp4" playsinline="true" webkit-playsinline="true" preload="auto" muted="muted" class="video-background"></video> -->
  
  <div id="intro" class="py-24 w-full min-h-screen flex flex-col items-center justify-center absolute top-0 z-[5]">
    <!-- <Countdown time="2024-11-27T09:00"></Countdown> -->
  
    <div class="absolute bottom-20 flex items-center flex-col justify-center text-white">
      <h1 class="font-spl text-white text-5xl">Come Let Huddle Together</h1>
  
      <!-- <svg id="intro-mouse" width="20px" height="100%" viewBox="0 0 247 390" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:1.5;">
        <path id="wheel" d="M123.359,79.775l0,72.843" style="fill:none;stroke:#fff;stroke-width:20px;"/>
        <path id="mouse" d="M236.717,123.359c0,-62.565 -50.794,-113.359 -113.358,-113.359c-62.565,0 -113.359,50.794 -113.359,113.359l0,143.237c0,62.565 50.794,113.359 113.359,113.359c62.564,0 113.358,-50.794 113.358,-113.359l0,-143.237Z" style="fill:none;stroke:#fff;stroke-width:20px;"/>
      </svg> -->
      <svg id="intro-mouse" xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-arrow-bar-down animate-bounce">
        <path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12 20l0 -10" />
        <path d="M12 20l4 -4" /><path d="M12 20l-4 -4" /><path d="M4 4l16 0" />
      </svg>
    </div>
  </div>

  <div class="video-background min-h-screen"></div>
  
  <main id="home-container" class="flex flex-col items-end justify-end z-1" >

    <section class="relative w-full bg-black bg-opacity-60 flex flex-col items-end justify-end">

      <div class="relative min-h-screen w-full flex flex-col items-center justify-center">

        <div class="flex flex-col md:flex-row gap-5 max-w-4xl w-full items-center justify-center">
          <div class="md:w-1/3">
            <img src="/img/huddle_white.svg" alt="huddle logo" class="h-24 md:h-48">
          </div>
          <div class="md:w-2/3 text-center space-y-3">
            <h1 class="text-3xl md:text-5xl font-extrabold text-white uppercase">
              Where the world comes to huddle
            </h1>
            <h2 class="md:text-xl font-bold text-white uppercase">
              Nov 28, 29, 30 at kovalam, trivandrum
            </h2>
            <div class="flex flex-row items-center justify-center gap-4">
              <button onclick="booking_popup('huddle-global-2024')" class="bg-[#c70000] border-2 border-[#c70000] text-white rounded-md shadow-lg px-5 py-2">Book Tickets</button>
              <a href="#about" class="border-2 border-white text-white rounded-md shadow-lg px-5 py-2">Explore Event</a>
            </div>
          </div>
        </div>
        
        <div class="absolute bottom-0 left-0 px-4 md:px-10 py-4 bg-[#c70000] w-full text-white grid grid-cols-4 md:grid-cols-8">
          {stats.map((item) => (
            <div class="text-center">
              <div class="font-bold text-xl md:text-3xl flex flex-row justify-center items-center">
                <div>{item.count}</div>
                <span class="text-xl mb-3">{item.symbol}</span>
              </div>
              <div class="text-xs md:text-sm text-yellow-400">{item.text}</div>
            </div>
          ))}
        </div>
      </div>
    
    </section>

  </main>

</section>

<style lang="scss" is:inline>

  .video-background {
    position: fixed;
    top: 50%;
    left: 50%;
    min-width: 100%;
    min-height: 100%;
    transform: translate(-50%, -50%);
    pointer-events: none;
    z-index: -5;
  }

  #home-container{
    min-height: 400vh;

    section {
      min-height: 150vh;
    }

    &.scrolled{
      min-height: 100vh;

      section{
        min-height: 100vh;
      }
    }
  }

</style>

<script>
  import * as THREE from "three";
  import getStarfield from "./earth/getStarfield.js";
  import { getFresnelMat } from "./earth/getFresnelMat.js";
  import milkyway from "./earth/milkyway.js"
  import { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';
  import { MTLLoader } from 'three/examples/jsm/loaders/MTLLoader';

  let loaded = 0;

  const w = window.innerWidth;
  const h = window.innerHeight;
  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(75, w / h, 0.1, 1000);
  camera.position.z = 3;
  const renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setSize(w, h);
  document.querySelector("#earth-container").appendChild(renderer.domElement);
  // THREE.ColorManagement.enabled = true;
  renderer.toneMapping = THREE.ACESFilmicToneMapping;
  renderer.outputColorSpace = THREE.LinearSRGBColorSpace;

  const earthGroup = new THREE.Group();
  earthGroup.rotation.z = 0 * Math.PI / 180;
  earthGroup.rotation.x = 23.4 * Math.PI / 180;
  // earthGroup.rotation.y = -23.4 * Math.PI / 180;
  scene.add(earthGroup);

  function checkLoaded(){
    loaded++;
    
    if(loaded >= 9){
      document.querySelector('body').classList.add("loaded");

      // scrollForward();
    }
  }

  const detail = 12;
  const loader = new THREE.TextureLoader();
  const geometry = new THREE.IcosahedronGeometry(1, detail);
  const material = new THREE.MeshPhongMaterial({
    map: loader.load("./textures/00_earthmap1k.jpg", checkLoaded()),
    specularMap: loader.load("./textures/02_earthspec1k.jpg", checkLoaded()),
    bumpMap: loader.load("./textures/01_earthbump1k.jpg", checkLoaded()),
    bumpScale: 0.04,
  });
  // material.map.colorSpace = THREE.SRGBColorSpace;
  const earthMesh = new THREE.Mesh(geometry, material);
  earthGroup.add(earthMesh);

  const lightsMat = new THREE.MeshBasicMaterial({
    map: loader.load("./textures/03_earthlights1k.jpg", checkLoaded()),
    blending: THREE.AdditiveBlending,
  });
  const lightsMesh = new THREE.Mesh(geometry, lightsMat);
  earthGroup.add(lightsMesh);

  const cloudsMat = new THREE.MeshStandardMaterial({
    map: loader.load("./textures/04_earthcloudmap.jpg", checkLoaded()),
    transparent: true,
    opacity: 0.5,
    blending: THREE.AdditiveBlending,
    alphaMap: loader.load('./textures/05_earthcloudmaptrans.jpg', checkLoaded()),
    // alphaTest: 0.3,
  });
  const cloudsMesh = new THREE.Mesh(geometry, cloudsMat);
  cloudsMesh.scale.setScalar(1.003);
  earthGroup.add(cloudsMesh);

  const fresnelMat = getFresnelMat({rimHex : 0x000000, facingHex : 0x00afef });
  const glowMesh = new THREE.Mesh(geometry, fresnelMat);
  glowMesh.scale.setScalar(1.01);
  earthGroup.add(glowMesh);

  const stars = getStarfield({numStars: 2000});
  scene.add(stars);

  const galaxy = milkyway();
  scene.add(galaxy);

  const sunLight = new THREE.DirectionalLight(0xffffff, 2.0);
  sunLight.position.set(-2, 0.5, 1.5);
  scene.add(sunLight);

  // Variables to store loaded objects
  let logo;

  // Load Logo
  const logoMtlLoader = new MTLLoader();
  logoMtlLoader.load('textures/logo-3d.mtl', function(materials) {
      materials.preload();
      const logoObjLoader = new OBJLoader();
      logoObjLoader.setMaterials(materials);
      logoObjLoader.load('textures/logo-3d.obj', function(object) {

        logo = object;
        logo.scale.set(-0.002, 0.002, 0.002); // Set the logo to 1/4th the size of the Earth
        scene.add(logo);
        
      });
      checkLoaded();
  });

  scene.traverse(function (child) {
    if (child.isMesh) {
      child.castShadow = true;
    }
  });

  const bg = new THREE.TextureLoader();
  bg.load('/textures/scene-bg-1.png' , function(texture){
    scene.background = texture;  
    checkLoaded();
  });

  // Orbit radius variable
  let orbitRadius = 1.5; // Adjustable orbit radius

  function animate() {
    requestAnimationFrame(animate);

    earthMesh.rotation.y += 0.002;
    lightsMesh.rotation.y += 0.002;
    cloudsMesh.rotation.y += 0.0023;
    glowMesh.rotation.y -= 0.002;
    stars.rotation.y -= 0.0002;
    
    galaxy.rotation.y -= 0.0002;

    // Update star colors to create a blinking effect
    const time = Date.now() * 0.005;
    const colors = galaxy.geometry.attributes.color.array;
    for (let i = 0; i < colors.length; i += 3) {
        colors[i] = 0.5 + 0.5 * Math.sin(time + i);
        colors[i + 1] = 0.5 + 0.5 * Math.sin(time + i + 2);
        colors[i + 2] = 0.5 + 0.5 * Math.sin(time + i + 4);
    }
    galaxy.geometry.attributes.color.needsUpdate = true;

    if (logo) {
      const orbitSpeed = -0.0008; // Orbit speed
      logo.position.x = Math.sin(Date.now() * orbitSpeed) * orbitRadius;
      logo.position.z = Math.cos(Date.now() * orbitSpeed) * orbitRadius;
      logo.position.y = 0; // Keep the logo at the same height

      logo.lookAt(new THREE.Vector3(0, 0, 0));
          
    }

    renderer.render(scene, camera);
  }

  animate();

  function handleWindowResize () {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  }
  window.addEventListener('resize', handleWindowResize, false);

  //Disable and enable Scroll Interaction

  // left: 37, up: 38, right: 39, down: 40,
  // spacebar: 32, pageup: 33, pagedown: 34, end: 35, home: 36
  var keys = {37: 1, 38: 1, 39: 1, 40: 1};

  function preventDefault(e) {
    e.preventDefault();
  }

  function preventDefaultForScrollKeys(e) {
    if (keys[e.keyCode]) {
      preventDefault(e);
      return false;
    }
  }

  // modern Chrome requires { passive: false } when adding event
  var supportsPassive = false;
  try {
    window.addEventListener("test", null, Object.defineProperty({}, 'passive', {
      get: function () { supportsPassive = true; } 
    }));
  } catch(e) {}

  var wheelOpt = supportsPassive ? { passive: false } : false;
  var wheelEvent = 'onwheel' in document.createElement('div') ? 'wheel' : 'mousewheel';

  // call this to Disable
  function disableScroll() {
    document.body.classList.add('overflow-y-hidden', 'relative');
    window.addEventListener('DOMMouseScroll', preventDefault, false); // older FF
    window.addEventListener(wheelEvent, preventDefault, wheelOpt); // modern desktop
    window.addEventListener('touchmove', preventDefault, wheelOpt); // mobile
    window.addEventListener('keydown', preventDefaultForScrollKeys, false);
  }

  // call this to Enable
  function enableScroll() {
    document.body.classList.remove('overflow-y-hidden', 'relative');
    window.removeEventListener('DOMMouseScroll', preventDefault, false);
    window.removeEventListener(wheelEvent, preventDefault, wheelOpt); 
    window.removeEventListener('touchmove', preventDefault, wheelOpt);
    window.removeEventListener('keydown', preventDefaultForScrollKeys, false);
  }


  // Video Section
  import { FastImageSequence } from "@mediamonks/fast-image-sequence";

  let fastImageSequence;

  fastImageSequence = new FastImageSequence(document.querySelector('.video-background'), {
    name: 'LoadTar',
    frames: 271,
    src: [
      {
        imageURL: (i) => {
          var filename = `bg-sequence/seq/seq-${('' + (i + 1)).padStart(3, '0')}.jpg`;
          console.log(i, filename);  
          return filename;
        },
        maxConnectionLimit: 10,
        maxCachedImages: 271
      }
    ],
    // optional arguments:
    loop: false, // default false
    objectFit: 'cover', // default 'cover'
    fillStyle: '#00000000', // default #00000000
    clearCanvas: false, // default false
    showDebugInfo: false,
  });

  fastImageSequence.ready().then(()=>{
    console.log(fastImageSequence);

    fastImageSequence.onLoadProgress((progress)=>{

      let percent = Math.floor((progress) * 100) + "%";
      
      document.querySelector('.loading-bar .progress').style.width = percent;
      document.querySelector('.loading-bar .percent').innerHTML = percent;

      console.log(percent);

      if(progress == 1){
        checkLoaded();
      }
    });
  });

  

  let lastKnownScrollPosition;
  let ticking = false;
  let videoEnd = false;

  function scrollForward(){
    disableScroll();

    document.querySelector("#intro").classList.add('hidden');
    document.querySelector("#earth-container").classList.add('hidden');

    fastImageSequence.play(30);

    setTimeout(()=>{
      
      document.querySelector("#home-container").classList.add('scrolled');
      document.querySelector('body').classList.add("scrolled");

      document.querySelector("#main-nav").style.display = 'inherit';

      videoEnd = true;

    }, 4000);

    setTimeout(()=>{

      window.scrollTo({
        top: 0, //document.querySelector("#home-container").scrollHeight - window.innerHeight,
        left: 0,
        behavior: "smooth"
      });

    }, 4100);

    setTimeout(()=>{

      enableScroll();

    }, 9000);

  }

  function scrollBackward(){

    disableScroll();

    document.querySelector("#main-nav").style.display = 'none';

    fastImageSequence.play(-30);

    setTimeout(()=>{
      window.scrollTo({
        top: 10,
        left: 0,
      });

      window.requestAnimationFrame(() => {
        window.scrollTo({
          top: 0,
          left: 0,
        });
      });


      enableScroll();

      document.querySelector("#earth-container").classList.remove('hidden');
      
      videoEnd = false;
    }, 4500);

  }

  function scrollSelect(scrollPos) {
    // Do something with the scroll position

    if(lastKnownScrollPosition == undefined){
      // scroll to top if last position is undefined

      window.scrollTo({
        top: 0
      });

    }
    else{

      if(scrollPos > 10 && scrollPos > lastKnownScrollPosition && scrollPos != window.innerHeight){
        if(!videoEnd){
          scrollForward();
        }
      }

      // if( scrollPos < document.querySelector("#home-container").scrollHeight - window.innerHeight - 10  && scrollPos < lastKnownScrollPosition){
      //   if(videoEnd){
      //     scrollBackward();
      //   }
      // }

    }

    console.log(scrollPos, lastKnownScrollPosition);

    lastKnownScrollPosition = scrollPos;

  }

  function setScrollTrigger(){

  }

  window.addEventListener("load", (event) => {
    window.scrollTo({
      top: 0
    });
  });

  document.querySelector('#intro').addEventListener('click', function(){
    scrollForward();
  })

  document.addEventListener("DOMContentLoaded", (event) => {

    document.addEventListener("scroll", (event) => {
      
      if (!ticking) {
        window.requestAnimationFrame(() => {
          scrollSelect(window.scrollY);
          ticking = false;
        });

        ticking = true;
      }

    });
    
  });

</script>